import * as zlib from "node:zlib";
import cors from "@koa/cors";
import gracefulShutdown from "http-graceful-shutdown";
import Koa from "koa";
import bodyParser from "koa-bodyparser";
import cacheControl from "koa-cache-control";
import compress from "koa-compress";
import {
    jsonApiErrorMiddleware,
    jsonApiRequestMiddleware,
    methodNotAllowedHandler,
} from "koa-jsonapi-zod";
import Router from "koa-tree-router";
import { appConfigHandler } from "./app-config/handler.js";
import { registerRoutes } from "./route/index.js";
import { orm, requestContextMiddleware } from "./util/mikro-orm.js";
import { logger, requestLoggerMiddleware } from "./util/logger.js";
{{#if (has features "appconfig")}}

const appConfigStartResult = await appConfigHandler.start();

if (appConfigStartResult.error) {
    throw appConfigStartResult.error;
}
{{/if}}

const app = new Koa();

app.use(cacheControl({ noStore: true }));
app.use(
    compress({
        br: {
            params: {
                [zlib.constants.BROTLI_PARAM_QUALITY]: 1,
            },
        },
    }),
);
app.use(cors({ maxAge: 86400 }));
app.use(jsonApiRequestMiddleware());
app.use(
    jsonApiErrorMiddleware({
        logError: (error, exposed) => {
            if (!exposed) {
                logger.error("Failed to serve request", { error });
            }
        },
    }),
);
app.use(bodyParser());

app.use(async (context, next) => {
    if (context.url === "/health") {
        context.body = { status: "alive" };
        return;
    }

    return next();
});
{{#if (has features "postgres")}}

app.use(requestContextMiddleware);
{{/if}}

const router = new Router({ onMethodNotAllowed: methodNotAllowedHandler });
registerRoutes(router);
app.use(router.routes());

const port = process.env.PORT ? parseInt(process.env.PORT, 10) : 3000;
const server = app.listen(port, process.env.HOST, () => {
    logger.info(`Server started on port ${port}`);
});

{{#if (has features "postgres" "appconfig")}}
gracefulShutdown(server, {
    onShutdown: async () => {
{{#if (has features "appconfig")}}
        appConfigHandler.stop();
{{/if}}
{{#if (has features "postgres")}}
        await orm.close();
{{/if}}
    },
});
{{else}}
gracefulShutdown(server);
{{/if}}

logger.info(`Server started on port ${port}`);
